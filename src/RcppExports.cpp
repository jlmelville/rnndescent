// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rnn_brute_force
List rnn_brute_force(const NumericMatrix& data, uint32_t nnbrs, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_brute_force(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_brute_force(data, nnbrs, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_brute_force
List rnn_logical_brute_force(const LogicalMatrix& data, uint32_t nnbrs, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_brute_force(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_brute_force(data, nnbrs, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_brute_force
List rnn_sparse_brute_force(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, uint32_t nnbrs, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_brute_force(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_brute_force(ind, ptr, data, ndim, nnbrs, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_brute_force_query
List rnn_brute_force_query(const NumericMatrix& reference, const NumericMatrix& query, uint32_t nnbrs, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_brute_force_query(SEXP referenceSEXP, SEXP querySEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_brute_force_query(reference, query, nnbrs, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_brute_force_query
List rnn_logical_brute_force_query(const LogicalMatrix& reference, const LogicalMatrix& query, uint32_t nnbrs, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_brute_force_query(SEXP referenceSEXP, SEXP querySEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_brute_force_query(reference, query, nnbrs, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_brute_force_query
List rnn_sparse_brute_force_query(const IntegerVector& ref_ind, const IntegerVector& ref_ptr, const NumericVector& ref_data, const IntegerVector& query_ind, const IntegerVector& query_ptr, const NumericVector& query_data, std::size_t ndim, uint32_t nnbrs, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_brute_force_query(SEXP ref_indSEXP, SEXP ref_ptrSEXP, SEXP ref_dataSEXP, SEXP query_indSEXP, SEXP query_ptrSEXP, SEXP query_dataSEXP, SEXP ndimSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ind(ref_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ptr(ref_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ref_data(ref_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ind(query_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ptr(query_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_brute_force_query(ref_ind, ref_ptr, ref_data, query_ind, query_ptr, query_data, ndim, nnbrs, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_reverse_nbr_size
IntegerVector rnn_reverse_nbr_size(const IntegerMatrix& nn_idx, std::size_t nnbrs, std::size_t len, bool include_self);
RcppExport SEXP _rnndescent_rnn_reverse_nbr_size(SEXP nn_idxSEXP, SEXP nnbrsSEXP, SEXP lenSEXP, SEXP include_selfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type len(lenSEXP);
    Rcpp::traits::input_parameter< bool >::type include_self(include_selfSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_reverse_nbr_size(nn_idx, nnbrs, len, include_self));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_idx_to_graph_self
List rnn_sparse_idx_to_graph_self(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, const IntegerMatrix& idx, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_idx_to_graph_self(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP idxSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_idx_to_graph_self(ind, ptr, data, ndim, idx, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_idx_to_graph_self
List rnn_idx_to_graph_self(const NumericMatrix& data, const IntegerMatrix& idx, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_idx_to_graph_self(SEXP dataSEXP, SEXP idxSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_idx_to_graph_self(data, idx, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_idx_to_graph_self
List rnn_logical_idx_to_graph_self(const LogicalMatrix& data, const IntegerMatrix& idx, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_idx_to_graph_self(SEXP dataSEXP, SEXP idxSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_idx_to_graph_self(data, idx, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_idx_to_graph_query
List rnn_idx_to_graph_query(const NumericMatrix& reference, const NumericMatrix& query, const IntegerMatrix& idx, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_idx_to_graph_query(SEXP referenceSEXP, SEXP querySEXP, SEXP idxSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_idx_to_graph_query(reference, query, idx, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_idx_to_graph_query
List rnn_logical_idx_to_graph_query(const LogicalMatrix& reference, const LogicalMatrix& query, const IntegerMatrix& idx, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_idx_to_graph_query(SEXP referenceSEXP, SEXP querySEXP, SEXP idxSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_idx_to_graph_query(reference, query, idx, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_idx_to_graph_query
List rnn_sparse_idx_to_graph_query(const IntegerVector& ref_ind, const IntegerVector& ref_ptr, const NumericVector& ref_data, const IntegerVector& query_ind, const IntegerVector& query_ptr, const NumericVector& query_data, std::size_t ndim, const IntegerMatrix& idx, const std::string& metric, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_idx_to_graph_query(SEXP ref_indSEXP, SEXP ref_ptrSEXP, SEXP ref_dataSEXP, SEXP query_indSEXP, SEXP query_ptrSEXP, SEXP query_dataSEXP, SEXP ndimSEXP, SEXP idxSEXP, SEXP metricSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ind(ref_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ptr(ref_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ref_data(ref_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ind(query_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ptr(query_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_idx_to_graph_query(ref_ind, ref_ptr, ref_data, query_ind, query_ptr, query_data, ndim, idx, metric, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_merge_nn_all
List rnn_merge_nn_all(const List& nn_graphs, bool is_query, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_merge_nn_all(SEXP nn_graphsSEXP, SEXP is_querySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type nn_graphs(nn_graphsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_query(is_querySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_merge_nn_all(nn_graphs, is_query, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_descent
List rnn_descent(const NumericMatrix& data, const IntegerMatrix& nn_idx, const NumericMatrix& nn_dist, const std::string& metric, std::size_t max_candidates, uint32_t n_iters, double delta, bool low_memory, std::size_t n_threads, bool verbose, const std::string& progress_type);
RcppExport SEXP _rnndescent_rnn_descent(SEXP dataSEXP, SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP metricSEXP, SEXP max_candidatesSEXP, SEXP n_itersSEXP, SEXP deltaSEXP, SEXP low_memorySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP, SEXP progress_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_candidates(max_candidatesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_iters(n_itersSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type low_memory(low_memorySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type progress_type(progress_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_descent(data, nn_idx, nn_dist, metric, max_candidates, n_iters, delta, low_memory, n_threads, verbose, progress_type));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_descent
List rnn_logical_descent(const LogicalMatrix& data, const IntegerMatrix& nn_idx, const NumericMatrix& nn_dist, const std::string& metric, std::size_t max_candidates, uint32_t n_iters, double delta, bool low_memory, std::size_t n_threads, bool verbose, const std::string& progress_type);
RcppExport SEXP _rnndescent_rnn_logical_descent(SEXP dataSEXP, SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP metricSEXP, SEXP max_candidatesSEXP, SEXP n_itersSEXP, SEXP deltaSEXP, SEXP low_memorySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP, SEXP progress_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_candidates(max_candidatesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_iters(n_itersSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type low_memory(low_memorySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type progress_type(progress_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_descent(data, nn_idx, nn_dist, metric, max_candidates, n_iters, delta, low_memory, n_threads, verbose, progress_type));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_descent
List rnn_sparse_descent(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, const IntegerMatrix& nn_idx, const NumericMatrix& nn_dist, const std::string& metric, std::size_t max_candidates, uint32_t n_iters, double delta, bool low_memory, std::size_t n_threads, bool verbose, const std::string& progress_type);
RcppExport SEXP _rnndescent_rnn_sparse_descent(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP metricSEXP, SEXP max_candidatesSEXP, SEXP n_itersSEXP, SEXP deltaSEXP, SEXP low_memorySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP, SEXP progress_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_candidates(max_candidatesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_iters(n_itersSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type low_memory(low_memorySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type progress_type(progress_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_descent(ind, ptr, data, ndim, nn_idx, nn_dist, metric, max_candidates, n_iters, delta, low_memory, n_threads, verbose, progress_type));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_diversify
List rnn_sparse_diversify(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, const List& graph_list, const std::string& metric, double prune_probability, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_diversify(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP graph_listSEXP, SEXP metricSEXP, SEXP prune_probabilitySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const List& >::type graph_list(graph_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< double >::type prune_probability(prune_probabilitySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_diversify(ind, ptr, data, ndim, graph_list, metric, prune_probability, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_diversify
List rnn_diversify(const NumericMatrix& data, const List& graph_list, const std::string& metric, double prune_probability, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_diversify(SEXP dataSEXP, SEXP graph_listSEXP, SEXP metricSEXP, SEXP prune_probabilitySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type graph_list(graph_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< double >::type prune_probability(prune_probabilitySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_diversify(data, graph_list, metric, prune_probability, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_diversify
List rnn_logical_diversify(const LogicalMatrix& data, const List& graph_list, const std::string& metric, double prune_probability, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_diversify(SEXP dataSEXP, SEXP graph_listSEXP, SEXP metricSEXP, SEXP prune_probabilitySEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const List& >::type graph_list(graph_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< double >::type prune_probability(prune_probabilitySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_diversify(data, graph_list, metric, prune_probability, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_merge_graph_lists
List rnn_merge_graph_lists(const List& graph_list1, const List& graph_list2);
RcppExport SEXP _rnndescent_rnn_merge_graph_lists(SEXP graph_list1SEXP, SEXP graph_list2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type graph_list1(graph_list1SEXP);
    Rcpp::traits::input_parameter< const List& >::type graph_list2(graph_list2SEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_merge_graph_lists(graph_list1, graph_list2));
    return rcpp_result_gen;
END_RCPP
}
// rnn_degree_prune
List rnn_degree_prune(const List& graph_list, std::size_t max_degree, std::size_t n_threads);
RcppExport SEXP _rnndescent_rnn_degree_prune(SEXP graph_listSEXP, SEXP max_degreeSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type graph_list(graph_listSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type max_degree(max_degreeSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_degree_prune(graph_list, max_degree, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_random_knn
List rnn_sparse_random_knn(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, uint32_t nnbrs, const std::string& metric, bool order_by_distance, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_random_knn(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP order_by_distanceSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type order_by_distance(order_by_distanceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_random_knn(ind, ptr, data, ndim, nnbrs, metric, order_by_distance, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_random_knn
List rnn_random_knn(const NumericMatrix& data, uint32_t nnbrs, const std::string& metric, bool order_by_distance, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_random_knn(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP order_by_distanceSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type order_by_distance(order_by_distanceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_random_knn(data, nnbrs, metric, order_by_distance, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_random_knn
List rnn_logical_random_knn(const LogicalMatrix& data, uint32_t nnbrs, const std::string& metric, bool order_by_distance, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_random_knn(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP order_by_distanceSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type order_by_distance(order_by_distanceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_random_knn(data, nnbrs, metric, order_by_distance, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_random_knn_query
List rnn_random_knn_query(const NumericMatrix& reference, const NumericMatrix& query, uint32_t nnbrs, const std::string& metric, bool order_by_distance, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_random_knn_query(SEXP referenceSEXP, SEXP querySEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP order_by_distanceSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type order_by_distance(order_by_distanceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_random_knn_query(reference, query, nnbrs, metric, order_by_distance, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_random_knn_query
List rnn_logical_random_knn_query(const LogicalMatrix& reference, const LogicalMatrix& query, uint32_t nnbrs, const std::string& metric, bool order_by_distance, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_random_knn_query(SEXP referenceSEXP, SEXP querySEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP order_by_distanceSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type order_by_distance(order_by_distanceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_random_knn_query(reference, query, nnbrs, metric, order_by_distance, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_random_knn_query
List rnn_sparse_random_knn_query(const IntegerVector& ref_ind, const IntegerVector& ref_ptr, const NumericVector& ref_data, const IntegerVector& query_ind, const IntegerVector& query_ptr, const NumericVector& query_data, std::size_t ndim, uint32_t nnbrs, const std::string& metric, bool order_by_distance, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_random_knn_query(SEXP ref_indSEXP, SEXP ref_ptrSEXP, SEXP ref_dataSEXP, SEXP query_indSEXP, SEXP query_ptrSEXP, SEXP query_dataSEXP, SEXP ndimSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP order_by_distanceSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ind(ref_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ptr(ref_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ref_data(ref_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ind(query_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ptr(query_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type order_by_distance(order_by_distanceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_random_knn_query(ref_ind, ref_ptr, ref_data, query_ind, query_ptr, query_data, ndim, nnbrs, metric, order_by_distance, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_rp_tree_knn_explicit
List rnn_rp_tree_knn_explicit(const NumericMatrix& data, uint32_t nnbrs, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, bool include_self, bool unzero, bool ret_forest, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_rp_tree_knn_explicit(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP include_selfSEXP, SEXP unzeroSEXP, SEXP ret_forestSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type include_self(include_selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unzero(unzeroSEXP);
    Rcpp::traits::input_parameter< bool >::type ret_forest(ret_forestSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_rp_tree_knn_explicit(data, nnbrs, metric, n_trees, leaf_size, max_tree_depth, include_self, unzero, ret_forest, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_rp_tree_knn_explicit
List rnn_sparse_rp_tree_knn_explicit(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, uint32_t nnbrs, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, bool include_self, bool unzero, bool ret_forest, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_rp_tree_knn_explicit(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP include_selfSEXP, SEXP unzeroSEXP, SEXP ret_forestSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type include_self(include_selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unzero(unzeroSEXP);
    Rcpp::traits::input_parameter< bool >::type ret_forest(ret_forestSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_rp_tree_knn_explicit(ind, ptr, data, ndim, nnbrs, metric, n_trees, leaf_size, max_tree_depth, include_self, unzero, ret_forest, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_rp_tree_knn_implicit
List rnn_sparse_rp_tree_knn_implicit(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, uint32_t nnbrs, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, bool include_self, bool unzero, bool ret_forest, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_rp_tree_knn_implicit(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP include_selfSEXP, SEXP unzeroSEXP, SEXP ret_forestSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type include_self(include_selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unzero(unzeroSEXP);
    Rcpp::traits::input_parameter< bool >::type ret_forest(ret_forestSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_rp_tree_knn_implicit(ind, ptr, data, ndim, nnbrs, metric, n_trees, leaf_size, max_tree_depth, include_self, unzero, ret_forest, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_rp_tree_knn_implicit
List rnn_rp_tree_knn_implicit(const NumericMatrix& data, uint32_t nnbrs, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, bool include_self, bool unzero, bool ret_forest, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_rp_tree_knn_implicit(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP include_selfSEXP, SEXP unzeroSEXP, SEXP ret_forestSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type include_self(include_selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unzero(unzeroSEXP);
    Rcpp::traits::input_parameter< bool >::type ret_forest(ret_forestSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_rp_tree_knn_implicit(data, nnbrs, metric, n_trees, leaf_size, max_tree_depth, include_self, unzero, ret_forest, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_rp_tree_knn_implicit
List rnn_logical_rp_tree_knn_implicit(const LogicalMatrix& data, uint32_t nnbrs, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, bool include_self, bool unzero, bool ret_forest, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_rp_tree_knn_implicit(SEXP dataSEXP, SEXP nnbrsSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP include_selfSEXP, SEXP unzeroSEXP, SEXP ret_forestSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type nnbrs(nnbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type include_self(include_selfSEXP);
    Rcpp::traits::input_parameter< bool >::type unzero(unzeroSEXP);
    Rcpp::traits::input_parameter< bool >::type ret_forest(ret_forestSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_rp_tree_knn_implicit(data, nnbrs, metric, n_trees, leaf_size, max_tree_depth, include_self, unzero, ret_forest, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_rp_forest_build
List rnn_rp_forest_build(const NumericMatrix& data, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_rp_forest_build(SEXP dataSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_rp_forest_build(data, metric, n_trees, leaf_size, max_tree_depth, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_rp_forest_build
List rnn_sparse_rp_forest_build(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_rp_forest_build(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_rp_forest_build(ind, ptr, data, ndim, metric, n_trees, leaf_size, max_tree_depth, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_rp_forest_implicit_build
List rnn_rp_forest_implicit_build(const NumericMatrix& data, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_rp_forest_implicit_build(SEXP dataSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_rp_forest_implicit_build(data, metric, n_trees, leaf_size, max_tree_depth, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_rp_forest_implicit_build
List rnn_logical_rp_forest_implicit_build(const LogicalMatrix& data, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_rp_forest_implicit_build(SEXP dataSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_rp_forest_implicit_build(data, metric, n_trees, leaf_size, max_tree_depth, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_rp_forest_implicit_build
List rnn_sparse_rp_forest_implicit_build(const IntegerVector& ind, const IntegerVector& ptr, const NumericVector& data, std::size_t ndim, const std::string& metric, uint32_t n_trees, uint32_t leaf_size, uint32_t max_tree_depth, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_rp_forest_implicit_build(SEXP indSEXP, SEXP ptrSEXP, SEXP dataSEXP, SEXP ndimSEXP, SEXP metricSEXP, SEXP n_treesSEXP, SEXP leaf_sizeSEXP, SEXP max_tree_depthSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type max_tree_depth(max_tree_depthSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_rp_forest_implicit_build(ind, ptr, data, ndim, metric, n_trees, leaf_size, max_tree_depth, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_rp_forest_search
List rnn_rp_forest_search(const NumericMatrix& query, const NumericMatrix& reference, const List& search_forest, uint32_t n_nbrs, const std::string& metric, bool cache, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_rp_forest_search(SEXP querySEXP, SEXP referenceSEXP, SEXP search_forestSEXP, SEXP n_nbrsSEXP, SEXP metricSEXP, SEXP cacheSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const List& >::type search_forest(search_forestSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_nbrs(n_nbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_rp_forest_search(query, reference, search_forest, n_nbrs, metric, cache, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_rp_forest_search
List rnn_logical_rp_forest_search(const LogicalMatrix& query, const LogicalMatrix& reference, const List& search_forest, uint32_t n_nbrs, const std::string& metric, bool cache, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_rp_forest_search(SEXP querySEXP, SEXP referenceSEXP, SEXP search_forestSEXP, SEXP n_nbrsSEXP, SEXP metricSEXP, SEXP cacheSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const List& >::type search_forest(search_forestSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_nbrs(n_nbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_rp_forest_search(query, reference, search_forest, n_nbrs, metric, cache, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_rp_forest_search
List rnn_sparse_rp_forest_search(const IntegerVector& ref_ind, const IntegerVector& ref_ptr, const NumericVector& ref_data, const IntegerVector& query_ind, const IntegerVector& query_ptr, const NumericVector& query_data, std::size_t ndim, const List& search_forest, uint32_t n_nbrs, const std::string& metric, bool cache, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_rp_forest_search(SEXP ref_indSEXP, SEXP ref_ptrSEXP, SEXP ref_dataSEXP, SEXP query_indSEXP, SEXP query_ptrSEXP, SEXP query_dataSEXP, SEXP ndimSEXP, SEXP search_forestSEXP, SEXP n_nbrsSEXP, SEXP metricSEXP, SEXP cacheSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ind(ref_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ptr(ref_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ref_data(ref_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ind(query_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ptr(query_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const List& >::type search_forest(search_forestSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_nbrs(n_nbrsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_rp_forest_search(ref_ind, ref_ptr, ref_data, query_ind, query_ptr, query_data, ndim, search_forest, n_nbrs, metric, cache, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_score_forest
List rnn_score_forest(const IntegerMatrix& idx, const List& search_forest, uint32_t n_trees, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_score_forest(SEXP idxSEXP, SEXP search_forestSEXP, SEXP n_treesSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< const List& >::type search_forest(search_forestSEXP);
    Rcpp::traits::input_parameter< uint32_t >::type n_trees(n_treesSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_score_forest(idx, search_forest, n_trees, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_query
List rnn_query(const NumericMatrix& reference, const List& reference_graph_list, const NumericMatrix& query, const IntegerMatrix& nn_idx, const NumericMatrix& nn_dist, const std::string& metric, double epsilon, double max_search_fraction, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_query(SEXP referenceSEXP, SEXP reference_graph_listSEXP, SEXP querySEXP, SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP metricSEXP, SEXP epsilonSEXP, SEXP max_search_fractionSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const List& >::type reference_graph_list(reference_graph_listSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type max_search_fraction(max_search_fractionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_query(reference, reference_graph_list, query, nn_idx, nn_dist, metric, epsilon, max_search_fraction, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_logical_query
List rnn_logical_query(const LogicalMatrix& reference, const List& reference_graph_list, const LogicalMatrix& query, const IntegerMatrix& nn_idx, const NumericMatrix& nn_dist, const std::string& metric, double epsilon, double max_search_fraction, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_logical_query(SEXP referenceSEXP, SEXP reference_graph_listSEXP, SEXP querySEXP, SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP metricSEXP, SEXP epsilonSEXP, SEXP max_search_fractionSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const List& >::type reference_graph_list(reference_graph_listSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type max_search_fraction(max_search_fractionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_logical_query(reference, reference_graph_list, query, nn_idx, nn_dist, metric, epsilon, max_search_fraction, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rnn_sparse_query
List rnn_sparse_query(const IntegerVector& ref_ind, const IntegerVector& ref_ptr, const NumericVector& ref_data, const IntegerVector& query_ind, const IntegerVector& query_ptr, const NumericVector& query_data, std::size_t ndim, const List& reference_graph_list, const IntegerMatrix& nn_idx, const NumericMatrix& nn_dist, const std::string& metric, double epsilon, double max_search_fraction, std::size_t n_threads, bool verbose);
RcppExport SEXP _rnndescent_rnn_sparse_query(SEXP ref_indSEXP, SEXP ref_ptrSEXP, SEXP ref_dataSEXP, SEXP query_indSEXP, SEXP query_ptrSEXP, SEXP query_dataSEXP, SEXP ndimSEXP, SEXP reference_graph_listSEXP, SEXP nn_idxSEXP, SEXP nn_distSEXP, SEXP metricSEXP, SEXP epsilonSEXP, SEXP max_search_fractionSEXP, SEXP n_threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ind(ref_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ref_ptr(ref_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ref_data(ref_dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ind(query_indSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type query_ptr(query_ptrSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type query_data(query_dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type ndim(ndimSEXP);
    Rcpp::traits::input_parameter< const List& >::type reference_graph_list(reference_graph_listSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type nn_idx(nn_idxSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type nn_dist(nn_distSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type max_search_fraction(max_search_fractionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rnn_sparse_query(ref_ind, ref_ptr, ref_data, query_ind, query_ptr, query_data, ndim, reference_graph_list, nn_idx, nn_dist, metric, epsilon, max_search_fraction, n_threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// is_binary_metric
bool is_binary_metric(const std::string& metric);
RcppExport SEXP _rnndescent_is_binary_metric(SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(is_binary_metric(metric));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rnndescent_rnn_brute_force", (DL_FUNC) &_rnndescent_rnn_brute_force, 5},
    {"_rnndescent_rnn_logical_brute_force", (DL_FUNC) &_rnndescent_rnn_logical_brute_force, 5},
    {"_rnndescent_rnn_sparse_brute_force", (DL_FUNC) &_rnndescent_rnn_sparse_brute_force, 8},
    {"_rnndescent_rnn_brute_force_query", (DL_FUNC) &_rnndescent_rnn_brute_force_query, 6},
    {"_rnndescent_rnn_logical_brute_force_query", (DL_FUNC) &_rnndescent_rnn_logical_brute_force_query, 6},
    {"_rnndescent_rnn_sparse_brute_force_query", (DL_FUNC) &_rnndescent_rnn_sparse_brute_force_query, 11},
    {"_rnndescent_rnn_reverse_nbr_size", (DL_FUNC) &_rnndescent_rnn_reverse_nbr_size, 4},
    {"_rnndescent_rnn_sparse_idx_to_graph_self", (DL_FUNC) &_rnndescent_rnn_sparse_idx_to_graph_self, 8},
    {"_rnndescent_rnn_idx_to_graph_self", (DL_FUNC) &_rnndescent_rnn_idx_to_graph_self, 5},
    {"_rnndescent_rnn_logical_idx_to_graph_self", (DL_FUNC) &_rnndescent_rnn_logical_idx_to_graph_self, 5},
    {"_rnndescent_rnn_idx_to_graph_query", (DL_FUNC) &_rnndescent_rnn_idx_to_graph_query, 6},
    {"_rnndescent_rnn_logical_idx_to_graph_query", (DL_FUNC) &_rnndescent_rnn_logical_idx_to_graph_query, 6},
    {"_rnndescent_rnn_sparse_idx_to_graph_query", (DL_FUNC) &_rnndescent_rnn_sparse_idx_to_graph_query, 11},
    {"_rnndescent_rnn_merge_nn_all", (DL_FUNC) &_rnndescent_rnn_merge_nn_all, 4},
    {"_rnndescent_rnn_descent", (DL_FUNC) &_rnndescent_rnn_descent, 11},
    {"_rnndescent_rnn_logical_descent", (DL_FUNC) &_rnndescent_rnn_logical_descent, 11},
    {"_rnndescent_rnn_sparse_descent", (DL_FUNC) &_rnndescent_rnn_sparse_descent, 14},
    {"_rnndescent_rnn_sparse_diversify", (DL_FUNC) &_rnndescent_rnn_sparse_diversify, 9},
    {"_rnndescent_rnn_diversify", (DL_FUNC) &_rnndescent_rnn_diversify, 6},
    {"_rnndescent_rnn_logical_diversify", (DL_FUNC) &_rnndescent_rnn_logical_diversify, 6},
    {"_rnndescent_rnn_merge_graph_lists", (DL_FUNC) &_rnndescent_rnn_merge_graph_lists, 2},
    {"_rnndescent_rnn_degree_prune", (DL_FUNC) &_rnndescent_rnn_degree_prune, 3},
    {"_rnndescent_rnn_sparse_random_knn", (DL_FUNC) &_rnndescent_rnn_sparse_random_knn, 9},
    {"_rnndescent_rnn_random_knn", (DL_FUNC) &_rnndescent_rnn_random_knn, 6},
    {"_rnndescent_rnn_logical_random_knn", (DL_FUNC) &_rnndescent_rnn_logical_random_knn, 6},
    {"_rnndescent_rnn_random_knn_query", (DL_FUNC) &_rnndescent_rnn_random_knn_query, 7},
    {"_rnndescent_rnn_logical_random_knn_query", (DL_FUNC) &_rnndescent_rnn_logical_random_knn_query, 7},
    {"_rnndescent_rnn_sparse_random_knn_query", (DL_FUNC) &_rnndescent_rnn_sparse_random_knn_query, 12},
    {"_rnndescent_rnn_rp_tree_knn_explicit", (DL_FUNC) &_rnndescent_rnn_rp_tree_knn_explicit, 11},
    {"_rnndescent_rnn_sparse_rp_tree_knn_explicit", (DL_FUNC) &_rnndescent_rnn_sparse_rp_tree_knn_explicit, 14},
    {"_rnndescent_rnn_sparse_rp_tree_knn_implicit", (DL_FUNC) &_rnndescent_rnn_sparse_rp_tree_knn_implicit, 14},
    {"_rnndescent_rnn_rp_tree_knn_implicit", (DL_FUNC) &_rnndescent_rnn_rp_tree_knn_implicit, 11},
    {"_rnndescent_rnn_logical_rp_tree_knn_implicit", (DL_FUNC) &_rnndescent_rnn_logical_rp_tree_knn_implicit, 11},
    {"_rnndescent_rnn_rp_forest_build", (DL_FUNC) &_rnndescent_rnn_rp_forest_build, 7},
    {"_rnndescent_rnn_sparse_rp_forest_build", (DL_FUNC) &_rnndescent_rnn_sparse_rp_forest_build, 10},
    {"_rnndescent_rnn_rp_forest_implicit_build", (DL_FUNC) &_rnndescent_rnn_rp_forest_implicit_build, 7},
    {"_rnndescent_rnn_logical_rp_forest_implicit_build", (DL_FUNC) &_rnndescent_rnn_logical_rp_forest_implicit_build, 7},
    {"_rnndescent_rnn_sparse_rp_forest_implicit_build", (DL_FUNC) &_rnndescent_rnn_sparse_rp_forest_implicit_build, 10},
    {"_rnndescent_rnn_rp_forest_search", (DL_FUNC) &_rnndescent_rnn_rp_forest_search, 8},
    {"_rnndescent_rnn_logical_rp_forest_search", (DL_FUNC) &_rnndescent_rnn_logical_rp_forest_search, 8},
    {"_rnndescent_rnn_sparse_rp_forest_search", (DL_FUNC) &_rnndescent_rnn_sparse_rp_forest_search, 13},
    {"_rnndescent_rnn_score_forest", (DL_FUNC) &_rnndescent_rnn_score_forest, 5},
    {"_rnndescent_rnn_query", (DL_FUNC) &_rnndescent_rnn_query, 10},
    {"_rnndescent_rnn_logical_query", (DL_FUNC) &_rnndescent_rnn_logical_query, 10},
    {"_rnndescent_rnn_sparse_query", (DL_FUNC) &_rnndescent_rnn_sparse_query, 15},
    {"_rnndescent_is_binary_metric", (DL_FUNC) &_rnndescent_is_binary_metric, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rnndescent(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
