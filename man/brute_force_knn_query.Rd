% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rnndescent.R
\name{brute_force_knn_query}
\alias{brute_force_knn_query}
\title{Query Exact Nearest Neighbors by Brute Force}
\usage{
brute_force_knn_query(reference, query, k, metric = "euclidean",
  n_threads = 0, grain_size = 1, verbose = FALSE)
}
\arguments{
\item{reference}{Matrix of \code{m} reference items. The nearest neighbors to the
queries are calculated from this data.}

\item{query}{Matrix of \code{n} query items.}

\item{k}{Number of nearest neighbors to return.}

\item{metric}{Type of distance calculation to use. One of \code{"euclidean"},
\code{"l2"} (squared Euclidean), \code{"cosine"}, \code{"manhattan"}
or \code{"hamming"}.}

\item{n_threads}{Number of threads to use.}

\item{grain_size}{Minimum batch size for multithreading. If the number of
items to process in a thread falls below this number, then no threads will
be used. Ignored if \code{n_threads < 1}.}

\item{verbose}{If \code{TRUE}, log information to the console.}
}
\value{
a list containing:
\itemize{
  \item \code{idx} an n by k matrix containing the nearest neighbor
  indices in \code{reference}.
  \item \code{dist} an n by k matrix containing the nearest neighbor
   distances to the items in \code{reference}.
}
}
\description{
Query Exact Nearest Neighbors by Brute Force
}
\examples{
# 100 reference iris items
iris_ref <- iris[iris$Species \%in\% c("setosa", "versicolor"), ]

# 50 query items
iris_query <- iris[iris$Species == "versicolor", ]

# For each item in iris_query find the 4 nearest neighbors in iris_ref
# If you pass a data frame, non-numeric columns are removed
# set verbose = TRUE to get details on the progress being made
iris_query_nn <- brute_force_knn_query(iris_ref, iris_query,
  k = 4, metric = "euclidean",
  verbose = TRUE
)

# Manhattan (l1) distance
iris_query_nn <- brute_force_knn_query(iris_ref, iris_query, k = 4, metric = "manhattan")
}
